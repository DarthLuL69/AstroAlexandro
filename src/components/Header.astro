---
// Add dark mode toggle functionality
---
<div class="relative">
  <button
    id="theme-toggle"
    class="w-4 h-4 bg-[rgb(var(--color-text-main))] rounded-full fixed top-6 right-6 z-50 transition-transform hover:scale-125"
    aria-label="Toggle dark mode"
  >
  </button>
  
  <header class="w-full max-w-3xl mx-auto px-6 py-4 mb-16">
    {/* Mobile Menu Button */}
    <button 
      id="mobile-menu-button" 
      class="md:hidden w-8 h-8 flex items-center justify-center"
      aria-label="Toggle menu"
    >
      <img 
        src="/src/assets/Menu.png" 
        alt="Menu" 
        class="w-6 h-6 transition-transform duration-300"
        id="menu-icon"
      />
    </button>

    {/* Navigation */}
    <nav 
      id="nav-menu" 
      class="hidden md:flex md:space-x-6 absolute md:static left-0 right-0 top-full 
        bg-[rgb(var(--color-bg-main))] md:bg-transparent
        py-4 md:py-0 px-6 md:px-0
        opacity-0 md:opacity-100
        transform -translate-y-2 md:translate-y-0
        transition-all duration-300 ease-out"
    >
      <a 
        href="/" 
        class="text-lg font-serif text-[rgb(var(--color-text-main))] hover:underline block md:inline-block py-2 md:py-0"
      >
        Home
      </a>
      <a 
        href="/proyects" 
        class="text-lg font-serif text-[rgb(var(--color-text-main))] hover:underline block md:inline-block py-2 md:py-0"
      >
        Projects
      </a>
      <a 
        href="/contact" 
        class="text-lg font-serif text-[rgb(var(--color-text-main))] hover:underline block md:inline-block py-2 md:py-0"
      >
        Contact
      </a>
    </nav>
  </header>
</div>

<script>
  const themeToggle = document.getElementById('theme-toggle');
  
  themeToggle?.addEventListener('click', () => {
    document.documentElement.classList.toggle('dark');
    const isDark = document.documentElement.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  });

  // Initialize theme
  if (localStorage.getItem('theme') === 'dark' ||
      (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
    document.documentElement.classList.add('dark');
  }

  // Mobile menu functionality
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const navMenu = document.getElementById('nav-menu');
  const menuIcon = document.getElementById('menu-icon');
  let isMenuOpen = false;

  mobileMenuButton?.addEventListener('click', () => {
    isMenuOpen = !isMenuOpen;
    
    if (isMenuOpen) {
      navMenu?.classList.remove('hidden', 'opacity-0', '-translate-y-2');
      navMenu?.classList.add('opacity-100', 'translate-y-0');
      menuIcon?.classList.add('rotate-90');
    } else {
      navMenu?.classList.remove('opacity-100', 'translate-y-0');
      navMenu?.classList.add('opacity-0', '-translate-y-2');
      menuIcon?.classList.remove('rotate-90');
      // Add a delay before hiding the menu to allow the animation to complete
      setTimeout(() => {
        navMenu?.classList.add('hidden');
      }, 300);
    }
  });

  // Close menu when clicking outside
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;
    if (isMenuOpen && !target.closest('#mobile-menu-button') && !target.closest('#nav-menu')) {
      mobileMenuButton?.click();
    }
  });

  // Close menu when window is resized to desktop view
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 768 && isMenuOpen) {
      mobileMenuButton?.click();
    }
  });
</script>

<style>
  /* Add smooth rotation animation for menu icon */
  #menu-icon {
    transform-origin: center;
  }
</style>
